[["veebirakendused2.html", "Praktikum 19 Veebirakendused, veebimajutus 2 19.1 Ajatelje kasutamine QGISis 19.2 Ajadimensioon Mapbox GL JS APIs 19.3 Lisa 19.4 Järgmisel korral", " Praktikum 19 Veebirakendused, veebimajutus 2 Eelmisel korral vaatasime, kuidas qgis2web plugina abil hõlpsalt oma QGISis tehtud kaardikihte veebikaardina jagada. Sel korral vaatame esmalt, mis võimalusi on QGISis ajalise dimensiooni kaasamiseks (nt mingite muutuste kuvamiseks), kuidas ajadimensiooni võrdlemisi lihtsalt Mapbox GL JSi API abil veebirakenduses kuvada. Kasutame sel korral Eesti filmi andmebaasist kogutud andmeid selle kohta, milliseid geograafilisi kohti läbi aegade Eesti filmides näha on olnud. Selleks on andmebaasis lisaks tavalistele märksõnadele märgendatud eraldi ka kohanimed. Selle kursuse tarbeks korjasime need R-i skriptiga kokku ning kokku vähemalt 5 korda esinenud kohanimede koordinaatidega sidumiseks kasutasime Maa-ameti geokodeerimise teenust. Kohad, millele teenuses mingid koordinaadid määrati, oleme üle vaadanud ning enam-vähem õigesse kohta liigutanud. Kohtadele, mis koordinaate ei saanud, ei ole neid ka eraldi lisatud. Laadime saadud andmestiku efis_parandatud.gpkg QGISi. Valime QuickMapServices kaudu ka mingi sobiva aluskaardi. 19.1 Ajatelje kasutamine QGISis Filtreerime andmestikust kõigepealt välja ainult need read, kus aastaarvud on olemas. Kuna Eesti kohta on info oluliselt detailsem kui välismaa kohta, piirame oma veebikaardi samuti ainult Eesti ala. Kasutame selleks Select Features by Freehand tööriista, et tõmmata ümber Eesti ala piiri, mille seest punkte valida. Salvestame tehtud valiku eraldi kihina. Nimetame selle nt nimega efis_eesti.gpkg. Eemaldame punktidelt äärejooned, valime punktidele värvid, teeme need läbipaistvamaks ning määrame punktide suuruse vastavalt sellele, kui palju mingit kohta mingil aastal filmides näidatud oli (tulp n, mille väärtused võiks korrutada läbi kolmega). Kuna aastaarvu sisaldav tulp on hetkel andmestikus tekstikujul ja sisaldab ka ajavahemikke (nt 1940-1941), tekitame andmestikku kaks uut tulpa: esmalt teeme uue tulba nimega aasta1, kus oleks arvu kujul ainult 4 esimest numbrit aasta tulbast: to_int(left(\"aasta\", 4)). seejärel teeme QGISi jaoks eraldi kuupäeva tulba nimega kuupaev, mida on vaja animeerimiseks: to_date(\"aasta1\", 'yyyy'). Figure 19.1: Eesti filmidega seotud kohad ja uued tunnused atribuuttabelis Teeme nüüd efis_eesti kihil paremkliki ning valime Properties. Vasakult menüüst valime Temporal ja teeme linnukese valiku ette Dynamic Temporal Control. Kuna meil on andmestikus nüüd kuupäeva tulp, saame valida konfiguratsiooniks väärtuse Single Field with Date/Time ning Field väärtuseks loodud tulba kuupaev. Vajutame OK. Figure 19.2: Ajadimensiooni kasutamine QGISis Valime järgmiseks menüüribalt, kus on nt ka salvestamise ja suumimise ikoonid, kella pildiga tööriista Temporal Controller Panel. Kui sul ei ole seda ikooni menüüs näha, siis mine View -&gt; Panels -&gt; Temporal Controller ja tee sinna ette linnuke. Avanenud menüüs vajutame rohelise noolekesega nupule Animated temporal navigation. Animation rangei saame määrata värskendamise ikooni juurest: Set to Full Range. Ajatelje sammuks määrame 1 aasta. Vajuta animatsiooni mängimise nupule ning peaksid nägema, kuidas kaardile ilmuvad igal aasta filmidega seotud olnud kohad ning nende ikoonide suurus vastab sellele, kui mitme filmiga need sel aastal seotud olid. Võime kuvada kaardil ka aastaarvu, et oleks lihtsam jälgida: View -&gt; Decorations -&gt; Title Label. Tee linnuke valiku ette Enable Title Label, vali Insert or Edit an Expression ja trüki avaldise kasti format_date(@map_start_time, 'yyyy'). Figure 19.3: QGIS Temporal Controller QGIS ei lase animatsiooni gif-ina salvestada, vaid kõik 100 pilti (aastatest 1921-2021) salvestatakse eraldi pildifailidena ning neid tuleb eraldi animeerida mõnes teises programmis, nt Ezgifi veebipõhises programmis. Selline gif on aga põhimõtteliselt lihtsalt liikuv pilt ning kasutajal ei ole võimalik andmeid kuidagi oma soovidele vastavalt põhjalikumalt uurida. 19.2 Ajadimensioon Mapbox GL JS APIs Mapboxi JavaScripti API sisaldab hulka funktsioone, mille abil on võimalik veebilehel või veebirakenduses näidata interaktiivseid veebikaarte ning näidata andmeid vastavalt kasutaja tegevusele ja valikutele. API funktsioonid on üsna põhjalikult kirjeldatud ning samuti on võimalik kasutada olemasolevaid näiteid ja õpetusi, et täiendada oma veebikaarti just endale vajalike funktsionaalsustega. Teeme siin lihtsa rakenduse, kus kasutaja saab liuguri abil vaadata eri aastate filmide kohaandmeid. Nagu eelmisel korral räägitud, kasutavad veebirakendused vähemalt kolme elementi: HTMLi, mis annab leheküljele struktuuri, CSSi, mis annab leheküljele kujunduse, ja JavaScripti, mis annab lehele interaktiivsuse. Salvestame efis_eesti geojsoni failina ja EPSG: 4326 projektsioonis. Ühtlasi eemaldame salvestamisel ebavajalikud tulbad, mis nt geokodeerimisega kaasa tulid. Avame geojsoni faili mingis tekstiredaktoris (nt Notepad või Notepad++) ning kustutame failist ära rea, mis algab \"crs\": { \"type\": \"name\", \"properties\": ja salvestame. See samm on vajalik selleks, et laadida geojsoni formaadis fail natukese aja pärast Mapbox Studiosse. 19.2.1 HTML Kõigepealt teeme valmis lihtsa HTML-i struktuuri, kus oleks päis ja keha ning kus kehas oleksid olemas meie lehekülje struktuurielemendid: kaart, kirjeldustekst, liugur. Ava mingi tekstiredaktor ning kopeeri sinna allolev kood. Salvesta fail nimega index.html. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; &lt;div id = &quot;kaart&quot;&gt;&lt;/div&gt; &lt;div id = &quot;kirjeldus&quot;&gt; &lt;div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; Ava nüüd fail index.html mingis veebibrauseris. Esialgu peaksid nägema lihtsalt tühja lehte. Päisesse peab Mapboxi APIt kasutades minema alati üsna kindel info. Seega kopeerime &lt;head&gt;&lt;/head&gt; märgendite vahele alloleva koodi: &lt;meta charset = &quot;utf-8&quot;/&gt; &lt;meta name=&#39;viewport&#39; content=&#39;width=device-width, initial-scale=1&#39; /&gt; &lt;title&gt;Kohad Eesti filmides&lt;/title&gt; &lt;script src=&#39;https://api.tiles.mapbox.com/mapbox-gl-js/v2.6.0/mapbox-gl.js&#39;&gt;&lt;/script&gt; &lt;link href=&#39;https://api.mapbox.com/mapbox-gl-js/v2.6.0/mapbox-gl.css&#39; rel=&#39;stylesheet&#39; /&gt; Samuti saame kohe ära määrata, mida tahame kehaosas &lt;body&gt; ja &lt;/body&gt; märgendite vahel näidata kirjeldava tekstina. Lisame kirjelduse &lt;div&gt;-märgendite vahele, enne liuguri jaotist kirjelduse pealkirja ja info andmete päritolu kohta: &lt;h1&gt;Eesti filmidega seotud kohad aastatel 1921-2021&lt;/h1&gt; &lt;p&gt;Andmed: efis.ee&lt;/p&gt; Värskenda brauseris lehte index.html, et näha, mis muutus. Lõpuks saame veel määrata, mis toimub liuguri jaotises. Lisame sinna aastaarvu, mis vastavalt kasutaja valikule muutuma hakkab, ning liuguri enda. Liugurile anname ka eraldi ID ja klassi, mille kaudu sellele CSSis ja JavaScriptis viidata saame. &lt;h2&gt;Aasta: &lt;label id=&quot;parasjagu_aasta&quot;&gt;1921&lt;/label&gt;&lt;/h2&gt; &lt;input id=&quot;liugur&quot; class=&quot;slider&quot; type=&quot;range&quot; min=&quot;1921&quot; max=&quot;2021&quot; value=&quot;1921&quot; /&gt; 19.2.2 CSS Järgmiseks võiksime panna paika CSSi. Selle võib ära kirjeldada eraldi css-laiendiga failis või HTML-i struktuuris &lt;style&gt;&lt;/style&gt; märgendite vahel. Lisame päise lõppu, enne &lt;/head&gt; märgendit niisiis veel info elementide kujunduse ja paigutuse kohta. &lt;style&gt; body { margin: 0; padding: 0; font-family: Helvetica, Arial, sans-serif; } #kaart { position: absolute; top: 0; bottom: 0; width: 100%; } #kirjeldus { position: absolute; width: 260px; margin: 10px; padding: 10px 20px; background-color: white; } .slider { width: 100%; } &lt;/style&gt; Värskenda taas loodud veebilehte, et näha, mis muutus. 19.2.3 JavaScript Nüüd liigume Mapbox Studiosse. Oma veebirakenduses kasutame nii Mapboxis stiliseeritud aluskaarti kui ka Mapboxi tilesetidesse laaditud Eesti filmi andmebaasi geojsoni andmeid. Esmalt stiliseerime kiiresti mingi kaardipõhja, mida oma rakenduses kasutada: Styles -&gt; New style. Kaardil võiksid olla halduspiirid, riigipiirid, maa, vesi ja taevas. Teeme valmis stiili avalikuks: Share -&gt; Allow copying -&gt; Make public. Järgmiseks laadime Mapbox Studiosse üles oma efis_eesti.geojson faili, kust on CRS-rida ära kustutatud: Datasets -&gt; New Dataset -&gt; Upload. Kui andmestik on datasetina üles laaditud, siis ekspordime selle omakorda tilesetiks: Export to tileset. Tee ka tileset avalikuks (Make public). Nüüd lisame oma HTML-faili &lt;body&gt;-jaotisesse uue jaotise &lt;script&gt;&lt;/script&gt; märgendite vahele. Siia tuleb nüüd JavaScripti osa, mis kasutab Mapboxi APIt. Kõik, mis on pärast märke //, on kommentaar, mis koodi kirjeldab, ent ei tee ise midagi. Minimaalselt on vaja kaardi tegemiseks allolevat koodi. See näitab HTML-failis meie stiliseeritud aluskaarti, ära tuleks vahetada ainult juurdepääsuluba ja kaardistiili aadress, mille saab Mapbox Studios enda loodud stiili juurest vastavalt Share -&gt; Developer resources -&gt; Web -&gt; Access token ja Share -&gt; Developer resources -&gt; Web -&gt; Style URL. &lt;script&gt; // aluskaart mapboxgl.accessToken = &#39;pk.sinukaardistiilijuurdepääsuluba&#39;; // kaardistiili juurdepääsuluba const map = new mapboxgl.Map({ container: &#39;kaart&#39;, // millises html-i jaotises kaarti hoida? style: &#39;mapbox://styles/sinukasutaja/stiiliaadress&#39;, // mapboxi kaardistiili aadress center: [24.89, 58.64], // aluskaardi keskpunkti koordinaadid zoom: 6.5 // sissesuumimise tase }); &lt;/script&gt; Järgmiseks võiksime lisada kaardile ka Mapboxi laaditud filmikohtade tileseti punktid. Selleks lisame &lt;script&gt;-märgendite vahele alloleva koodi, mis pärast aluskaardi laadimist määrab ära meie punktiandmete allika Mapboxis ning seejärel lisab sealt allikast punktid veebirakenduse aluskaardile. Sedapuhku tuleb koodis asendada nüüd avalikuks tehtud tileseti aadress. // punktandmed // kui aluskaart on laadinud, siis... map.on(&#39;load&#39;, () =&gt;{ // määra punktandmete allikas (nimetame selle nimega &quot;filmid&quot;) map.addSource(&#39;filmid&#39;, { type: &#39;vector&#39;, // andmetüüp on vektorandmed url: &#39;mapbox://sinukasutaja.tilesetiaadress&#39; // mapboxi tileseti aadress }); // lisa aluskaardi peale määratud allikast (punkti)kiht map.addLayer({ &#39;id&#39;: &#39;eesti_filmid&#39;, // nimetame kihi nimega &quot;eesti_filmid&quot; &#39;type&#39;: &#39;circle&#39;, // andmetüüp on (täitevärviga) punkt &#39;source&#39;: &#39;filmid&#39;, // andmete allikas on eelnevalt loodud objekt &quot;filmid&quot; &#39;source-layer&#39;: &#39;efis_eesti&#39;, // geojsoni kihi enda nimi on &quot;efis_eesti&quot; &#39;paint&#39;: { &#39;circle-color&#39;: &#39;#f3a6b2&#39;, // punktide värv roosa &#39;circle-stroke-color&#39;: &#39;transparent&#39;, // punktide äärejoon läbipaistev &#39;circle-opacity&#39;: 0.4, // punktide väljapaistvus 0.4 &#39;circle-radius&#39;: { // punkti suuruse võtame property: &#39;n&#39;, // andmestiku tunnusest &quot;n&quot; stops: [[1, 8], [10, 36]] // kui n = 1, siis on punkti suurus 8, kui n = 10, siis 36, teised jäävad ühtlaselt nende vahepeale } } }); }); Nüüd tuleks teha ka midagi selleks, et liugur kaardil toimuvaga kuidagi seotud oleks. Lisame skriptiosa lõppu, map.on('load', ... jaotise sisse niisiis veel mõned read koodi. Kood küsib veebilehelt, mida kasutaja liuguri väärtuseks on määranud, ning filtreerib näidatavalt punktikihilt välja ainult vastava aastaarvuga read. Samuti muudab skript parasjagu_aasta väärtust rakenduse kirjelduses. // muuda kaarti ja aasta loendurit vastavalt liuguri liigutamisele document.getElementById(&#39;liugur&#39;).addEventListener(&#39;input&#39;, (e) =&gt; { const kasutaja_aasta = parseInt(e.target.value); // võta kasutaja sisend (= aastaarv liugurilt) ja salvesta see objekti &quot;kasutaja_aasta&quot; // muuda kaarti: // määra kihile &quot;eesti_filmid&quot; filter, millega // filtreerid kogu andmestikust välja ainult need read, kus // tulbas &quot;aasta1&quot; on sama väärtus, mis objektil &quot;kasutaja_aasta&quot; map.setFilter(&#39;eesti_filmid&#39;, [&#39;==&#39;, [&#39;number&#39;, [&#39;get&#39;, &#39;aasta1&#39;]], kasutaja_aasta]); // muuda aasta loendurit kirjelduses: // määra HTML-is elemendile id-ga &quot;parasjagu_aasta&quot; sama väärtus, mille kasutaja liuguril valib document.getElementById(&#39;parasjagu_aasta&#39;).innerText = kasutaja_aasta; }); Lõpetuseks võiksime veel lisada sellise funktsionaalsuse, et kui kasutaja mõnel punktil klikib, näidatakse talle meie (filtreeritud) eesti filmide kohtade punktikihilt popupi sees punkti alla jääva koha nime ja selle esinemiskordade arvu mingil aastal. Selleks lisame pärast map.on('load'... }); ja enne &lt;/script&gt; märgendit veel eraldi koodilõigu. // lisa popup, kui kasutaja mõnel kaardil klikib map.on(&#39;click&#39;, (event) =&gt; { // kui klikitakse, siis võta kihilt &quot;eesti_filmid&quot; // punktid, mis klikkimise piirkonda jäävad const features = map.queryRenderedFeatures(event.point, { layers: [&#39;eesti_filmid&#39;] }); // kui ei jää ühtegi punkti if (!features.length){ return; // ära näita midagi } // kui jääb mõni punkt const feature = features[0]; // siis võta neist kõige esimene // tee popup, mis paikneks punktist kaardil natuke ülevalpool const popup = new mapboxgl.Popup({offset: [0, -15]}); // sea popupi koordinaatideks punkti koordinaadid andmestikus popup.setLngLat(feature.geometry.coordinates); // määra popupi sisu (koht + esinemiskordade arv) popup.setHTML(&#39;&lt;h3&gt;&#39; + feature.properties.koht + &#39;&lt;/h3&gt;&lt;p&gt;Esinemiskordi: &#39; + feature.properties.n + &#39;&lt;/p&gt;&#39;) // lisa popup kaardile popup.addTo(map); }); Terve veebilehe kood näeb nüüd välja niisiis järgmine: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset = &quot;utf-8&quot;/&gt; &lt;meta name=&#39;viewport&#39; content=&#39;width=device-width, initial-scale=1&#39; /&gt; &lt;title&gt;Kohad Eesti filmides&lt;/title&gt; &lt;script src=&#39;https://api.tiles.mapbox.com/mapbox-gl-js/v2.6.0/mapbox-gl.js&#39;&gt;&lt;/script&gt; &lt;link href=&#39;https://api.mapbox.com/mapbox-gl-js/v2.6.0/mapbox-gl.css&#39; rel=&#39;stylesheet&#39; /&gt; &lt;style&gt; body { margin: 0; padding: 0; font-family: Helvetica, Arial, sans-serif; } #kaart { position: absolute; top: 0; bottom: 0; width: 100%; } #kirjeldus { position: absolute; width: 260px; margin: 10px; padding: 10px 20px; background-color: white; } .slider { width: 100%; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id = &quot;kaart&quot;&gt;&lt;/div&gt; &lt;div id = &quot;kirjeldus&quot;&gt; &lt;h1&gt;Eesti filmidega seotud kohad aastatel 1921-2021&lt;/h1&gt; &lt;p&gt;Andmed: Eesti filmi andmebaas (efis.ee)&lt;/p&gt; &lt;div&gt; &lt;h2&gt;Aasta: &lt;label id=&quot;parasjagu_aasta&quot;&gt;1921&lt;/label&gt;&lt;/h2&gt; &lt;input id=&quot;liugur&quot; class=&quot;slider&quot; type=&quot;range&quot; min=&quot;1921&quot; max=&quot;2021&quot; value=&quot;1921&quot; /&gt; &lt;/div&gt; &lt;/div&gt; &lt;script&gt; // aluskaart mapboxgl.accessToken = &#39;pk.sinukaardistiilijuurdepääsuluba&#39;; // kaardistiili juurdepääsuluba const map = new mapboxgl.Map({ container: &#39;kaart&#39;, // millises html-i jaotises kaarti hoida? style: &#39;mapbox://styles/sinukasutaja/stiiliaadress&#39;, // mapboxi kaardistiili aadress center: [24.89, 58.64], // aluskaardi keskpunkti koordinaadid zoom: 6.5 // sissesuumimise tase }); // punktandmed // kui aluskaart on laadinud, siis... map.on(&#39;load&#39;, () =&gt;{ // määra punktandmete allikas (nimetame selle nimega &quot;filmid&quot;) map.addSource(&#39;filmid&#39;, { type: &#39;vector&#39;, // andmetüüp on vektorandmed url: &#39;mapbox://sinukasutaja.tilesetiaadress&#39; // mapboxi tileseti aadress }); // lisa aluskaardi peale määratud allikast (punkti)kiht map.addLayer({ &#39;id&#39;: &#39;eesti_filmid&#39;, // nimetame kihi nimega &quot;eesti_filmid&quot; &#39;type&#39;: &#39;circle&#39;, // andmetüüp on (täitevärviga) punkt &#39;source&#39;: &#39;filmid&#39;, // andmete allikas on eelnevalt loodud objekt &quot;filmid&quot; &#39;source-layer&#39;: &#39;efis_eesti&#39;, // geojsoni kihi enda nimi on &quot;efis_eesti&quot; &#39;paint&#39;: { &#39;circle-color&#39;: &#39;#f3a6b2&#39;, // punktide värv roosa &#39;circle-stroke-color&#39;: &#39;transparent&#39;, // punktide äärejoon läbipaistev &#39;circle-opacity&#39;: 0.4, // punktide väljapaistvus 0.4 &#39;circle-radius&#39;: { // punkti suuruse võtame property: &#39;n&#39;, // andmestiku tunnusest &quot;n&quot; stops: [[1, 8], [10, 36]] // kui n = 1, siis on punkti suurus 8, kui n = 10, siis 36, teised jäävad ühtlaselt nende vahepeale } } }); // muuda kaarti ja aasta loendurit vastavalt liuguri liigutamisele document.getElementById(&#39;liugur&#39;).addEventListener(&#39;input&#39;, (e) =&gt; { const kasutaja_aasta = parseInt(e.target.value); // võta kasutaja sisend (= aastaarv liugurilt) ja salvesta see objekti &quot;kasutaja_aasta&quot; // muuda kaarti: // määra kihile &quot;eesti_filmid&quot; filter, millega // filtreerid kogu andmestikust välja ainult need read, kus // tulbas &quot;aasta1&quot; on sama väärtus, mis objektil &quot;kasutaja_aasta&quot; map.setFilter(&#39;eesti_filmid&#39;, [&#39;==&#39;, [&#39;number&#39;, [&#39;get&#39;, &#39;aasta1&#39;]], kasutaja_aasta]); // muuda aasta loendurit kirjelduses: // määra HTML-is elemendile id-ga &quot;parasjagu_aasta&quot; sama väärtus, mille kasutaja liuguril valib document.getElementById(&#39;parasjagu_aasta&#39;).innerText = kasutaja_aasta; }); // lisa popup, kui kasutaja mõnel kaardil klikib map.on(&#39;click&#39;, (event) =&gt; { // kui klikitakse, siis võta kihilt &quot;eesti_filmid&quot; // punktid, mis klikkimise piirkonda jäävad const features = map.queryRenderedFeatures(event.point, { layers: [&#39;eesti_filmid&#39;] }); // kui ei jää ühtegi punkti if (!features.length){ return; // ära näita midagi } // kui jääb mõni punkt const feature = features[0]; // siis võta neist kõige esimene // tee popup, mis paikneks punktist kaardil natuke ülevalpool const popup = new mapboxgl.Popup({offset: [0, -15]}); // sea popupi koordinaatideks punkti koordinaadid andmestikus popup.setLngLat(feature.geometry.coordinates); // määra popupi sisu (koht + esinemiskordade arv) popup.setHTML(&#39;&lt;h3&gt;&#39; + feature.properties.koht + &#39;&lt;/h3&gt;&lt;p&gt;Esinemiskordi: &#39; + feature.properties.n + &#39;&lt;/p&gt;&#39;) // lisa popup kaardile popup.addTo(map); }); }); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; Paneme lehe index.html nüüd üles GitHubi (vt eelmise korra materjale). 19.3 Lisa Kui tahad veebikaartide tegemise kohta rohkem õppida, siis väga hea ja põhjaliku kursuse veebikaartide kohta leiad näiteks siit. 19.4 Järgmisel korral Ruumiandmete analüüs R-is. Selleks palun installi endale R ja RStudio uusimad versioonid. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
