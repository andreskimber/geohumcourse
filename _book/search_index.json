[["tekstianalyys2.html", "Praktikum 15 Geograafiline tekstianalüüs 2 15.1 Ülesanne: lihtne teksti meelsuse analüüs", " Praktikum 15 Geograafiline tekstianalüüs 2 Tänases praktikumis tegeleme geograafilise tekstianalüüsiga, katsetades eesti keele automaattöötluseks loodud vahendeid. Nagu eelmises praktikumis mainitud, sisaldub selleks kõige põhjalikum tööriistade komplekt Pythoni EstNLTK teekides. Kasutame geograafilise tekstianalüüsi näitlikustamiseks Tartu Linnaraamatukogu e-raamatute eeltöödeldud faile (lehel kaustas soned.zip). Tegeleme selles praktikumis Eduard Bornhöhe teosega Vürst Gabriel ehk Pirita kloostri viimsed päevad. Figure 15.1: Vürst Gabriel ehk Pirita kloostri viimsed päevad lähtetekst 15.1 Ülesanne: lihtne teksti meelsuse analüüs Ülesandes leiame, milliseid kohanimeüksusi on teoses mainitud; analüüsime, milline on kohanimeüksust sisaldava tekstikatkendi meelsus: kas tekst on pigem positiivne, negatiivne, vastuoluline või neutraalne; geokodeerime kohanimeüksused või leiame kohanimeüksustele vastavad ruumiandmed; visualiseerime andmeid. 15.1.1 Kohanimeüksuste tuvastamine Kohanimeüksuste automaatseks tuvastamiseks ning nende vahetu konteksti eraldamiseks tekstist kasutame EstNLTK analüüsivahendeid. Selleks, et Pythoni installimiselt ning skriptide kirjutamiselt aega kokku hoida, kasutame praktikumis Google Colabi, mille kaudu saame jooksutada juba valmis kirjutatud skripti. Kui soovid eesti keele automaattöötluse kohta rohkem õppida, on suureks abiks TÜ kursus Eesti keele töötlus Pythonis. Skripti väljundiks on fail kontekstitabel_bornhohe_incorr.csv, kus on tabelkujul kohanimeüksus sellisel kujul, nagu see tekstis esineb (tulp kohad). Mitmest sõnast koosneva kohanimeüksuse puhul (nt Tallinna linnast) ainult kõige esimene komponent (nt Tallinna); katkend/kontekst ehk 20 sõna kohanimest vasakule ja paremale (tulp kontekstid); kohanimeüksuse kõige esimese komponendi lemma (tulp lemmad1) ehk sõnaraamatukuju (nt Tallinn); terve kohanimeüksus (tulp lemmad2), milles lemmatiseeritud ehk sõnaraamatukujule viidud ainult kõige viimane element (nt Tallinna linn). Tabelis on nimetuvastaja automaatne väljund, kus mingeid parandusi ei ole tehtud. ## kohad ## 1 Tallinnas ## 2 Harju ## 3 Harju ## 4 Tallinnast ## 5 Paidesse ## 6 Liivi ## kontekstid ## 1 kloostri viimsed päevad . E. Bornhöhe ( Eduard Brunberg&#39;i ) ajaloolik jutustus suurest Liivi sõjast ( 1558 - 1583 ) . Tallinnas . Trükitud G. Pihlaka kuluga . 1. Junker Hansu äpardus . See oli kena , soe suvine päev Lõikuse kuu ## 2 Junker Hansu äpardus . See oli kena , soe suvine päev Lõikuse kuu hakatusel 1576. Armsalt ja rahuliselt säras päike Harju maa üle , aga maakoha pilt , mida päikese ja soojuse kiired läbipaistva kuldse uduga katsivad , ei olnud ## 3 ohakatega kaetud põllud , ära põletatud mõisade ja külade ahervarred - need olivad maakoha tähtsamad tundemärgid . Rikas ja rõõmus Harju maa oli 18 aastase sõja läbi suuremalt jaolt vaikseks kõrbeks muudetud , kus Sakslased ja Poolakad , Venelased ja ## 4 kus Sakslased ja Poolakad , Venelased ja Rootslased aeg ajalt endise rikkuse riismeid taastamas käisivad . Maantee pääl , mis Tallinnast Paidesse viib ja sel ajal kõige viletsamas korras oli , sõitsivad neli ratsanikku , kõik noored mehed Saksa moodi ## 5 Sakslased ja Poolakad , Venelased ja Rootslased aeg ajalt endise rikkuse riismeid taastamas käisivad . Maantee pääl , mis Tallinnast Paidesse viib ja sel ajal kõige viletsamas korras oli , sõitsivad neli ratsanikku , kõik noored mehed Saksa moodi riides ## 6 rohkeste nalja ja naeris ise kõige valjemine oma nalja üle . Tema nägu oli selle parandamata kergemeele peegel , mis Liivi orduriigi mõisnikkusi ja kodanikkusi hirmsa sõja hädasid unustama ja Venelasi sagedaste imestama pani . Vana orduriik oli Vene löökide ## lemmad1 lemmad2 ## 1 Tallinn Tallinn ## 2 Harju Harju ## 3 Harju Harju ## 4 Tallinn Tallinn ## 5 pai pai ## 6 Liivi Liivi orduriik 15.1.2 Tekstikatkendite meelsuse tuvastamine Järgmiseks määrame tekstikatkendite meelsuse. Selleks saame kasutada näiteks Eesti Keele Instituudi emotsioonidetektorit, mida saab kasutada ka Microsoft Excelis. Selleks installime kõigepealt vastava pistikprogrammi (plugin): laadime alla faili valence.xlam; avame Exceli ja valime File -&gt; Options -&gt; Add-Ins; kõige all valime Manage -&gt; Excel Add-ins -&gt; Go -&gt; Browse -&gt; valime faili valence.xlam -&gt; OK; paneme Exceli kinni ning teeme uuesti lahti. Järgmiseks avame Excelis faili kontekstitabel_bornhohe_incorr.csv: Data -&gt; From Text -&gt; Delimited, File origin: Unicode (UTF-8) ja My data has headers -&gt; Next -&gt; Delimiters (ainult Semicolon) -&gt; Next -&gt; Finish. (Uuemate Exceli versioonide puhul vaata juhendit siit). Hindame esmalt kohanimetuvastuse kvaliteeti. On teada, et automaatne nimetuvastus töötab kõige paremini isikunimede tuvastamisega ning tänapäevaste tekstide peal. Seega on üpris ootuspärane, et vanemate tekstidega väga puhast tulemust ei saa. Võime natuke andmeid käsitsi puhastada ja korrastada, nt muuta pai -&gt; Paide, Kuimets -&gt; Kuimetsa,koluveri -&gt; Koluvere, Kuura -&gt; Kura, Lasna -&gt; Lasnamäe, kustutame read, kus kohanimeks on analüüsitud Venelasi, Daanlasi, Haleda, Kirikherra, Sandstede, Viimne, Eesti ja Vene keele nimetustena, ühtlustame Viru ja Viru maa jm. Määrame nüüd kohanimede konteksti meelsuse. Tekitame uue tulba, nt nimega ajutine. Kirjutame uue tulba esimesse lahtrisse funktsiooni =Valence.Test() ning funktsiooni sulgude sisse vastaval real asuva lahtri viite, kus on tekstikatkend, nt =Valence.Test(B2). Kopeerime valemi kõikidesse ajutise tulba lahtritesse nii, et igal real oleks funktsiooni sulgude sees vastava rea number (B2, B3, B4, B5 jne) ning funktsiooni vasteks õige tekstikatkendi hinnang. Teeme tulba kõrvale uue tulba nimega emotsioonid ning kopeerime kõik ajutise tulba väärtused sellesse tulpa, kasutades väärtustena kleepimist (Paste as Values). Kustutame tulba Ajutine ning salvestame faili csv- või xlsx-failina. NB! Windowsis muutub csv-na salvestamisel faili kodeering UTF-8st Windowsis endas kasutatavaks, keelespetsiifiliseks kodeeringuks. Kui tahad kodeeringut tagasi UTF-8ks muuta, siis installi näiteks Notepad++, ava csv-fail seal ning vali Encoding -&gt; Convert to UTF-8 -&gt; Save. 15.1.3 Koordinaatide lisamine (geokodeerimine) Nüüd peame saama oma tabelile koordinaadid. Selleks kasutame Maa-ameti massgeokodeerimise teenust. Figure 15.2: Geokodeerimise sätted Laadime üles csv- või xlsx-faili, kasutame sisendaadressiks/lähteaadressiks pikka kohanimeüksust ehk tulpa lemmad2 ning kui töö on valmis, siis saadud tabeli SHP-failina alla (eeldame, et me ei hakka käsitsi faili koordinaate muutma). 15.1.4 Visualiseerimine Avame QGISi ning laadime sinna geokodeeritud faili. Valime sobiva aluskaardi, näiteks eelmisel korral kasutatud Natural Earth Data vektorandmed (admin0 Countries). Lisaks võime välja otsida mõne Eesti ajaloolise haldusjaotuse kaardi. Lisame ka punktid kaardile. Vaatame siltide põhjal, millised kohanimed kindlasti valesse kohta on saanud (Maa-ameti geokodeerija töötab hästi ainult Eesti tänapäevaste kohanimedega!). Liigutame valed nimed õigesse kohta. Selleks, et liigutada korraga mitut punkti, teeme nähtavaks Wiev -&gt; Toolbars -&gt; Advanced Digitizing Toolbar, vajutame sisse kihi muutmise, valime punkti(d), mida liigutada, ning liigutame need Move Feature tööriista abil uude kohta. Visualiseerime, kui mitu korda igat kohta mainiti, kui suur osa mainimisest olid negatiivses, positiivses, neutraalses või vastuolulises kontekstis. 15.1.4.1 Mainimiste arv Võime vastavad andmed tuletada mitut moodi. Näiteks võiksime teha esmalt geokodeeritud kihist uue virtuaalse kihi (Layer -&gt; Create Layer -&gt; New Virtual Layer), kus iga kohanimeüksuse esinemisjuhud on kokku loetud (count) ja lisatud tulpa arv. SELECT lemmad__1, count(*) as arv, geometry FROM geocoded GROUP BY lemmad__1; Samuti saaksime punktide arvu mingis kohas teada ka nii, et valime Processing -&gt; Toolbox -&gt; Vector analysis -&gt; Statistics by categories, valides sisendkihiks geocoded ja Field(s) with categories väärtuseks *lemmad__1*, ent sellisel juhul ei tuleks kaasa punktide geomeetriat ja me ei saaks tulemusi otse kaardil kuvada. Kui tahame esialgse tabeliga kihist koopiat, kuhu on lisatud ka uus tulp, kus iga mainimise kohta on selle koha mainimiste koguarv, võib valida Processing -&gt; Toolbox -&gt; Vector general -&gt; Join attributes by location (summary), määrata mõlemaks ühendatavaks kihiks geocoded, Fields to summarise väärtuseks *lemmad__1* ja Summaries to calculate väärtuseks count. Lihtsalt visualiseerimiseks aga ei pea üldse mitte uut kihti tegema. Kasutame avaldisi, et kohandada olemasoleva kihi sümboloogiat ning näitame mainimiste arvu ringide suuruse abil. Teeme geocoded kihil paremkliki -&gt; Properties -&gt; Symbology -&gt; Single symbol -&gt; Simple marker -&gt; Size -&gt; Data defined override -&gt; Edit -&gt; log(2, count(\"Sisend_ID\", group_by:=\"lemmad__1\")*3). Samamoodi siltide lisamisel. Määrame suuruse logaritmitud skaalal selleks, et rõhutada erinevusi pigem väiksemate sageduste vahel. 15.1.4.2 Emotsioonid Teeme nüüd uue virtuaalse kihi emotsioonid, kus oleks iga kohanime kohta kokku loetud, kui mitu korda mainiti seda positivises, negatiivses, neturaalses või vastuolulises kontekstis. SELECT lemmad__1, count(*) as arv, geometry, emotsiooni FROM geocoded GROUP BY lemmad__1, Emotsiooni; (Pane tähele, et kui emotsioone sisaldav tulbanimi oli enne emotsioonid, siis geokodeeritud andmetes on tulbanimi pisut lühenenud.) Nüüd saame visualiseerida lihtsalt teatud emotsioonidega seotud kohti, ent võime ka arvutada iga emotsiooni osakaalu vastava koha katkendite hulgas. Ühendamiseks võime liita emotsioonidega kihile esimese, koondsagedustega kihi. Ühendatud kihil loome uue atribuudi osakaal (tulp arv jagatud tulbaga koguarv_arv ja korrutatud 100-ga). Kihte võib ühendada jällegi ka nii, et valime Processing -&gt; Toolbox -&gt; Vector general -&gt; Join attributes by field value (NB! one-to-many!). Katseta, mismoodi oleks kõige parem emotsioone ja mainimiste arvu visualiseerida! "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
