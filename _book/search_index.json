[["r2.html", "Praktikum 21 Ruumiandmete analüüs R-iga 2 21.1 Pakettide laadimine ja andmete töötlemine 21.2 Kasutajaliides 21.3 Server 21.4 Rakenduse kokkupanemine 21.5 Rakenduse jagamine", " Praktikum 21 Ruumiandmete analüüs R-iga 2 Eelmisel korral vaatasime, kuidas R-iga lihtsamaid kaarte teha. See hõlmas vajalike pakettide laadimist, andmete sisselugemist, andmete filtreerimist, andmete visualiseerimist. Sel korral vaatame, kuidas teha R-is lihtsat veebirakendust, mis kuvaks kaarti vastavalt kasutaja valikutele. Siin tuleb osata pisut R-i (või juhendeid lugeda), aga mitte näiteks JavaScripti ega HTMLi. R-is saab interaktiivsete rakenduste tegemiseks kasutada Shiny paketti. Kui sinu RStudios ei ole veel Shiny võimalust, tuleb pakett esmalt installida. # Trüki konsooli if(!&quot;shiny&quot; %in% rownames(installed.packages())) install.packages(&quot;shiny&quot;) # Käsus kontrollitakse, kas shiny pakett sisaldub # installitud pakettide nimede hulgas # ning kui ei sisaldu (hüüumärki kasutatakse mingi tingimuse eitamiseks), # siis installi. Seejärel vali File -&gt; New File -&gt; Shiny Web App, anna oma rakendusele nimi (nt kultuurimalestised vmt) ning jäta rakenduse tüübi (Application type) valikuks Single File. See tähendab, et nii kasutajaliides (ui - see osa, mida kasutaja näeb ja mille abil rakendusega suhtleb) kui ka serveri loogika (server - see osa, mis vastavalt kasutaja valikutele tegelikult andmetega midagi teeb) on ühes R-i failis koos ning selle faili nimi on app.R. Multiple File tähendaks, et ühes failis on kasutajaliidese osa ning teises serveri osa ning kui tahta rakendust kasutada, peavad olemas olema mõlemad failid. Kasutuses kahel variandil praktiliselt vahet ei ole. Vali ka kaust, milles tahad oma rakendust hoida. Selle kausta sisse tekib omakorda kaust sinu rakenduse nimega (nt kultuurimalestised), mille sees on fail app.R ja mille sisse võiksid minna ka kõik rakenduses kasutatavad failid (nt tabelandmestikud, shapefileid, pildid jm). Avaneb fail app.R, kus on juba valmis põhi, mille sisse saad oma rakendust kirjutada. Vaikimisi põhi on tehtud histogrammi joonistamiseks. Vajuta rohelise noolekesega nupul Run App. Võid valida ka Run in Viewer Pane, et kuvada rakendust RStudio enda keskkonnas. Kui tahad nüüd näha rakenduse endaga paralleelselt koodi, millega rakendus on tehtud, trüki konsooli runExample(\"01_hello\", display.mode = \"showcase\"). Rakenduse minimaalne nõutud struktuur koosneb neljast osast ning näeb välja selline (trellidega on tähistatud kommentaarid): # 1. Rakenduse töötamiseks vajaliku shiny paketi laadimine. # Siin saab sisse lugeda ka teised paketid, # vajalikud andmed ning neid andmeid vajadusel töödelda. library(shiny) # 2. Kasutajaliides ui &lt;- fluidPage( # Siin saab defineerida, kuidas kasutajaliides välja näeb, sh # kus ja kuidas lasta kasutajal teha mingeid valikuid, # milliseid valikuid kasutaja teha saab # (nt filtreerida algandmetest mingeid andmeid, # muuta mingitel väljundi elementidel värvi, # kujundeid, teksti suurust, väljundit salvestada jne), # milline on kasutaja valikute põhjal genereeritud väljund # (nt kaart, tabel, joonis, tekst jne) # ja kus see paikneb. # fluidPage() teeb lehe, mis kohandub kasutaja brauseriakna suurusega, # fixedPage() teeb lehe, mis on vaikimisi 940 piksli laiune. ) # 3. Serveri loogika server &lt;- function(input, output){ # Siin saab defineerida, mida rakendus kasutaja valikute põhjal teeb # ning kuidas soovitud väljundini jõuda, # nt kui kasutaja valib A, siis tehakse väljund niisugustest andmetest, # kui kasutaja valib B, siis tehakse väljund naasugustest andmetest jne. } # 4. Rakenduse kokkupanemine shinyApp(ui = ui, server = server) Vaatame nüüd rakenduse struktuuri lähemalt ning teeme ise ühe lihtsa rakenduse, mis võtaks sisendiks failid maakond_20201001.shp (polügoonid) ja kultuurimalestised.shp (punktid), laseks kasutajal valida, millist liiki mälestisi (ajalugu, arheoloogia, arhitektuur, kunst) punktidena kuvada ning millist piirkonda näidata (tervet Eestit või konkreetset maakonda). Võid kasutada vaikimisi avatud rakenduse malli, ent kustuta sel juhul ära kommentaarid ning ui- ja server-funktsioonide sisu. library(shiny) ui &lt;- fluidPage() server &lt;- function(input, output){} shinyApp(ui = ui, server = server) Aseta rakenduse kausta (kus on ka fail app.R) ka vajalikud failid (maakond_20201001.shp ja kultuurimalestised.shp). 21.1 Pakettide laadimine ja andmete töötlemine Kõigepealt võiks faili päisesse lisada kommentaarid (kõik #-märkidega read on kommentaarid) selle kohta, mida rakendus teeb, milliseid faile ja pakette kasutab ning kes ja millal on rakenduse teinud. Kommentaarid rakenduses kuskil näha ei jää ega ole sisuliselt olulised, seega võib need ka ära kustutada. # See rakendus kuvab veebikaardi kultuurimälestistest. # # Rakenduse sisendfailideks on # maakond_20201001.shp ja kultuurimalestised.shp. # # Rakendus kasutab pakette shiny, sf ja tidyverse (sh ggplot2). # # Maarja-Liisa Pilvik # 7.12.2020 Järgmiseks laaditakse rakenduse töötamiseks vajalikud paketid. Kuna vaikimisi avaneval rakendusel pole aimugi, mida rakendusega päriselt tegema hakatakse, on tema ainukeseks nõudeks see, et shiny pakett oleks installitud ja laaditud. Meie laadime lisaks shiny-paketile ka paketid sf ja tidyverse. # 1. Laadime paketid ja loeme sisse andmed ---- library(shiny) # vajalik rakenduse töötamiseks library(sf) # vajalik ruumiandmete sisselugemiseks ja analüüsiks library(tidyverse) # sisaldab paketti ggplot2 (visualiseerimiseks) ning # dplyr ja tidyr (andmetöötluseks) Loeme sisse ka rakenduses kasutatavad andmed ning töötleme neid selleks, et saada sobivam failistruktuur. # Loeme andmestikud sisse (las need olla rakenduse kaustas). maakonnad = st_read(&quot;maakond_20201001.shp&quot;) malestised = st_read(&quot;kultuurimalestised.shp&quot;) # Teeme kultuurimälestiste laiast tabelist # (mälestiste liigid eraldi tulpades, st KUNST: Y-N, ARHITEKTUUR: Y-N jne) # samanimelise pika tabeli, kus oleks # ainult üks tulp mälestiste liikidega (LIIK: KUNST, ARHITEKTUUR, ...). malestised &lt;- gather(malestised, # andmestik, mida muuta key = LIIK, # vanade tulpade nimed uude tulpa LIIK value = yesno, # vanade tulpade väärtused uude tulpa yesno AJALUGU:KUNST) %&gt;% # vanad tulbad ise filter(yesno == &quot;Y&quot;) %&gt;% # jäta alles ainult read, kus yesno väärtus on &quot;Y&quot; select(-yesno) # seejärel viska yesno tulp andmestikust välja # Muudame mälestiste liikide väärtused (nt ARHEOLOOGI) ilusamaks (nt Arheoloogia). malestised$LIIK &lt;- recode(malestised$LIIK, # muudame tulpa &quot;LIIK&quot; AJALUGU = &quot;Ajalugu&quot;, ARHEOLOOGI = &quot;Arheoloogia&quot;, ARHITEKTUU = &quot;Arhitektuur&quot;, KUNST = &quot;Kunst&quot;) 21.2 Kasutajaliides Edasi tuleb kasutajaliidese (ui) osa, mis määrab ära selle, kuidas kasutaja rakendust näeb. Kasutajaliides moodustub hierarhilistest funktsioonidest (funktsioonid tähistatud sulgudega, mille sees täpsustatakse funktsioonide argumente). Meie teeme lihtsa kasutajaliidese, kus on rakenduse pealkiri; külgribamenüü, kus saab valida märkeruutudega menüüs kuvatavate mälestiste liigid, rippmenüüs maakonna, kuhu kaardil sisse suumida; väljundi ala, kus näidatakse kasutaja valikutest sõltuvalt kaarti. # 2. Defineerime kasutajaliidese (user interface ehk ui) ---- ui &lt;- fluidPage( # vaade, mis kohandub kasutaja brauseriakna suurusega # Rakenduse pealkiri titlePanel(&quot;Eesti kultuurimälestised&quot;), # Valime vaates sellise elementide paigutuse, # mis koosneb külgrgibamenüüst ja väljundist sidebarLayout( # külgribamenüüs on sidebarPanel( checkboxGroupInput( # märkeruutudega menüü, kus: inputId = &quot;liik&quot;, # suvaline nimi, millega menüüd tähistada label = &quot;Vali mälestiste liik&quot;, # kuvatav juhendtekst choices = unique(malestised$LIIK)), # liigid ise selectInput( # rippmenüü,kus: inputId = &quot;maakond&quot;, # suvaline nimi, millega menüüd tähistada label = &quot;Vali maakond&quot;, # kuvatav juhendtekst choices = c(unique(maakonnad$MNIMI), &quot;Kõik maakonnad&quot;), # maakonnad selected = &quot;Kõik maakonnad&quot;, # vaikimisi valitud kõik multiple = FALSE)), # mitut korraga valida ei saa # väljundiks on mainPanel( plotOutput( # joonis, kus: outputId = &quot;kaart&quot;)) # suvaline nimi, millega joonist tähistada ) ) 21.3 Server Järgmiseks defineerime selle, mis juhtub, kui kasutaja mingeid valikuid teeb. Teeme nii, et rakenduse avamisel kuvatakse kasutajale lihtsalt ilma mälestisteta Eesti maakondade kaarti ning kaarti uuendatakse vastavalt sellele, millised andmed (kultuurimälestiste liigid) valitakse, ning millisesse piirkonda tahetakse sisse suumida. Kasutajaliidese Input-klassi elementidele viidatakse serveriosas dollarimärgi ja omistatud id-ga kujul input$... (nt input$liik või input$maakond). Output-klassi elementidele kujul output$... (nt output$kaart). # 3. Defineerime serveri loogika ehk selle, mida rakendus teeb ---- server &lt;- function(input, output){ # Kasutajaliidese väljundi (output) koha peale &#39;kaart&#39; output$kaart &lt;- renderPlot({ # tehakse joonis, # mille sisendandmed sõltuvad kasutaja valikutest # mälestiste kihil andmed &lt;- filter(malestised, # filtreeri mälestistest need read, kus LIIK %in% input$liik) # liik vastab kasutaja valikutele # ja suumimine sõltub kasutaja valikutest # maakondade kihil suum &lt;- if(input$maakond == &quot;Kõik maakonnad&quot;) # kui valitud on kõik st_bbox(maakonnad) # siis võta terve maakondade kihi piirid else # vastasel juhul st_bbox(maakonnad %&gt;% # võta piirid ainult filter(MNIMI == input$maakond)) # valitud maakonnast # Kui sisendandmed ja suumi tase valitud, tee ggplotiga joonis, kus ggplot() + # on alati maakondade kiht (ei sõltu kasutaja valikutest) geom_sf(data = maakonnad) + # ning mälestiste kiht (sõltub kasutaja valikutest) geom_sf(data = andmed, # valikutest tulenevad andmed aes(shape = LIIK, color = LIIK), # kuju ja värv liigi järgi alpha = 0.3, # punktide väljapaistvus 30% size = 3) + # punktide suurus 3 # suumi sisse vastavalt kasutaja valikutele maakondade sisendis coord_sf(xlim = c(suum[&quot;xmin&quot;], suum[&quot;xmax&quot;]), ylim = c(suum[&quot;ymin&quot;], suum[&quot;ymax&quot;])) + # lisa kaardile pealkiri vastava maakonna nimega labs(title = input$maakond) + # kuva kaarti mustvalge teemaga theme_bw() + # aseta legend kaardi alla theme(legend.position = &quot;bottom&quot;) }) } 21.4 Rakenduse kokkupanemine Kõige lõpuks on vaja rakendus kasutajaliidesest ja serverist kokku panna. # 4. Paneme rakenduse kokku ---- shinyApp(ui = ui, server = server) Jooksutame rakendust ning vaatame, mis saab. Meie rakendus teeb oma töö ära, ent on nii kujunduselt kui ka kasutusmugavuse mõttes üsna algeline. Shinys saab aga muuta ja lisada veel lugematul hulgal asju, parandada rakenduse kiirust jne. Hea samm-sammulise sissejuhatuse rakenduste tegemisse leiab siit. 21.5 Rakenduse jagamine Shiny rakendusi saab jagada ainult kas lokaalselt (app.R + selle juurde kuuluvad failid) või üles laadituna serverisse, kuhu on installitud ka R ja Shiny Server (viimast saab installida ainult Linuxis). See tähendab, et tavalist HTML-faili Shiny rakendusest otse teha ei saa, sest JavaScript ei tea, mida R-i kooditükkidega pihta hakata. Küll aga saab rakenduse üles laadida näiteks shinyapps.io serverisse ning lisada rakendus seejärel iframei abil mõne teise (HTMLis) veebilehe sisse. Shinyapps.io pakub Shiny rakenduste majutuse teenust, kusjuures tasuta saab üles laadida kuni 5 rakendust ja neid ei tohi serveris ühes kuus aktiivselt kasutada rohkem kui 25 tundi. Rakenduse laadimiseks serverisse tuleb esmalt teha endale shinyapps.io kasutaja, logida sisse ning valida seejärel Account -&gt; Tokens. Samal ajal installi endale R-is pakett rsconnect ja laadi see. install.packages(&quot;rsconnect&quot;) library(rsconnect) Nüüd vali shinyapps.io lehel Tokens alamlehel Show -&gt; Copy to clipboard, kopeeri esitatud kood ning tee RStudio konsoolis paremklikk -&gt; Paste või vajuta Ctrl+V. Nii ühendad lokaalselt installitud R-i ja enda kasutaja shinyapps.io serveris. Rakenduse üleslaadimiseks trüki konsooli deployApp() ning anna argumendiks selle kausta teekond, kus rakendus on (juhul, kui rakendus on kaustas, mida näitab funktsioon getwd(), piisab lihtsalt kausta nimest). deployApp(&quot;kultuurimalestised&quot;) Selle tulemusel avaneb lõpuks lehekülg https://sinukasutajanimi.shinyapps.io/rakendusenimi/. Vaata täpsemalt siit. Üles laaditud rakenduse saab panna iframe-i abil HTML-faili. Näiteks siin on ülalpool tehtud rakendus: Vaata rohkem näiteid siit. "]]
