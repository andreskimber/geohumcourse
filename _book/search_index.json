[["veebirakendused.html", "Praktikum 18 Veebirakendused, veebimajutus 18.1 Kaardikihid QGISis 18.2 Veebikaartide eksportimine 18.3 Veebikaartide majutamine", " Praktikum 18 Veebirakendused, veebimajutus Tavalised arvutis hoitavad kaardid on digitaalsed kaardid, mille võib panna ka veebilehele, ent mille koostamine, säilitamine ja näitamine ei sõltu kuidagi veebitehnoloogiast. Digitaalsed kaardid on staatilised. Veebikaardid aga lihtsalt ei paikne veebis, vaid on veebist sõltuvad: nii nende koostamine kui ka vaatamine sõltub veebitehnoloogiast. Sageli on veebikaardid dünaamilised, interaktiivsed ning võivad kasutada ka mujalt veebist päritavaid andmeid. Lisaks sellele, et veebikaartidel saab kuvada korraga mitut kihti, mingeid kihte sisse ja välja lülitada või kasutada andmete esitamiseks animatsiooni, saab nendele lisada ka erinevaid lisaelemente, näiteks sisse- ja väljasuumimine, vahemaade mõõtmine, legend, pealkirjad, otsing jpm. Samuti saab määrata, mis juhtub, kui kasutaja liigub hiirega mingi punkti peale, sellel klikib või mingil muul moel veebikaardiga suhtleb. Tänapäevase veebikaardi aluskaart koosneb paanidest (tiles), tüüpiliselt 256×256 piksli suurustest rasterpiltidest (aga juba ka vektoritest), mida laaditakse vastavalt kasutaja valikutele kaardipaanide serverist (näiteks OpenStreetMapi serverist). See tähendab, et kasutajale näidatakse ainult seda osa kaardist, mida tal on vaja näha, muutes kaardi laadimise oluliselt kiiremaks. Figure 18.1: Kaardipaanide laadimine (Allikas: Axis Maps) Aluskaart annab sinu veebikaardile geograafilise konteksti, ent ei ole iseenesest kaardi tegemise ega vaatamise põhjuseks. Aluskaardil saab omakorda kuvada muid vektor- või rasterandmeid. Suur osa veebikaartidest (ja neid pakkuvatest APIdest) on vaikimisi Web Mercatori (EPSG:3857) projektsioonis, mille puhul peab arvestama sellega, et alade suurus on moonutatud. Kui tahta teha sageli, palju või korralikke veebikaarte ja kaardirakendusi, tasub vähemalt mingil algtasemel ära õppida keel, milles seda teha saab. Veebilehed kasutavad (vähemalt) HTMLi, et veebilehte struktureerida, CSSi, et veebilehte kujundada, ning JavaScripti, et lisada veebilehele interaktiivsust. Figure 18.2: HTML, CSS ja JavaScript (Allikas: dev.to) Ühe lihtsa veebilehe struktuur HTML-failis võib välja näha näiteks selline: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Minu lehe pealkiri&lt;/title&gt; &lt;link href=&quot;stiil.css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot;&gt; &lt;/head&gt; &lt;body bgcolor=&quot;black&quot; text=&quot;white&quot;&gt; &lt;h1&gt;Minu esimene veebileht&lt;/h1&gt; &lt;p&gt;Siin on mingi tekst.&lt;/p&gt; &lt;p&gt;Siin on &lt;a href=&quot;https://tartugeohum.github.io/&quot; target=&quot;_blank&quot;&gt;link&lt;/a&gt;, kust leiab kõik selle kursuse materjalid&lt;/p&gt; &lt;p&gt;Siin all on nupp, millele vajutades saab veel midagi teada.&lt;/p&gt; &lt;p id=&quot;pealkiri&quot; style=&quot;display:none&quot;&gt;See on minu esimene veebileht!&lt;/p&gt; &lt;button type=&quot;button&quot; onclick=&quot;document.getElementById(&#39;pealkiri&#39;).style.display=&#39;block&#39;&quot;&gt;Vajuta siia!&lt;/button&gt; &lt;/body&gt; &lt;/html&gt; Selle veebilehe juurde käiv CSS-fail omakorda selline: h1{ text-align: center; color: blue; font-size: 40px; } p{ font-family: courier; font-size: 20px; } Kokku saab ühe väga lihtsa lehe, mis näeb välja selline: Figure 18.3: Lihtne veebileht Interaktiivsete veebikaartide jaoks kasutatakse sageli näiteks JavaScripti Leafleti või OpenLayersi APIsid (Application Programming Interface), mis suhtlevad erinevate serveritega ning muudavad ja kuvavad kaarti vastavalt kasutaja valikutele. Mõlemad teegid on vabavaralised ja avatud lähtekoodiga, samas kui näiteks Google Mapsi API ja ArcGISi API on seotud konkreetse omandusliku (proprietary) tarkvaraga. Figure 18.4: Leaflet ja OpenLayers Leafleti kasutatakse üldiselt rohkem, see on ökonoomsem, lihtsama APIga ning sobib hästi lihtsamate kaardirakenduste tegemiseks (Leaflet does the 20% of things that are required 80% of the time). Samas saab paljud funktsioonid kätte ainult erinevatest pluginatest ning kõiki võib-olla ei olegi veel olemas. Suure hulga funktsionaalsustega kaardirakenduste jaoks soovitatakse kasutada pigem OpenLayersit, mille API on keerulisem, ent selle võrra on see paindlikum ning pakub rohkem funktsioone. Ka Mapbox pakub oma JavaScripti teeki/paketti Mapbox GL JS, mis võimaldab koostada veebikaarte ja kaardirakendusi. 18.1 Kaardikihid QGISis Eelmisel korral tegime kaardi, kus interpoleerisime murdekorpuse sagedusandmete põhjalt ei ole ja pole rasterkihi, kus kihelkondade keskpunktide väärtuste järgi oli ennustatud ka vahepealseid väärtusi, kuigi sealt algselt andmeid ei olnud. Seekord teeme võrdluseks kaardid murdeatlase levikuandmete põhjalt. Selleks teeme esmalt ettevalmistusi: laadime QGISi kihelkondade ja atlase andmete vektorkihid, filtreerime punktikihilt välja read, kus keelendeid ei ole, teeme uue tulba nimega bin_value, kus oleks väärtus 0 ridadel, kus tulbas Keelend on ka p-täht (pole), ning väärtus 1 ridadel, kus seal p-tähte ei ole (ei ole). värvime reeglipõhiselt punktid vastavalt variandile ei ole või pole. 18.1.1 Heatmap Teeme nüüd esmalt lihtsalt punktide jaotumise KDE heatmapi, et näha, kust üldse andmeid rohkem on. Processing -&gt; Toolbox -&gt; Heatmap (Kernel Density Estimation) Määrame raadiuseks 50 km ja piksli suuruseks 500. Lõikame rastri kihelkondade kihi järgi (Raster -&gt; Extraction -&gt; Clip Raster by Mask Layer). Värvime rastri nii, et alad, kust on rohkem punkte, on tumedamad. Nimetame lõigatud ja värvitud rastri nt nimega KDE punktitihedus. 18.1.2 Punktide Thin Plate Spline rasterkiht Järgmiseks teeme rasterkihi Thin Plate Spline meetodiga, et ennustada ei ole vs. pole väärtusi ka nendele aladele, kust atlases punkte ei ole. Processing -&gt; Toolbox -&gt; Thin Plate Spline Kasutame atlase punktikihi bin_value tulpa, kus on ainult väärtused 0 ja 1. Rasterkihil niisiis ennustame väärtusi 0 ja 1 vahepeale (tegelikult ka üle ja alla nende). Määrame piksli suuruseks 500 ja Regularisation väärtuseks 0,1. Lõikame rastri kihelkondade kihi järgi. Värvime rastri nii, et alad, mis on pole-lembesemad, on tumedamad. Nimetame lõigatud ja värvitud rastri nt nimega TPS punktidega. 18.1.3 Osakaalude Thin Plate Spline rasterkiht Lõpetuseks teeme kolmanda rasterkihi, kus üldistame igale kihelkonnale mingi kindla pole osakaalu ja interpoleerime kihelkondade keskpunktide järgi. See sarnaneb paljuski sellele, mida tegime eelmiselgi korral. Loeme kokku iga kihelkonna piiridesse jäävad punktid: Processing -&gt; Toolbox -&gt; Count points in polygon. Nimetame kihi nimega kokku. Loeme kokku iga kihelkonna piiridesse jäävad pole punktid. Selleks valime punktikihil kõigepealt ainult punktid, millel tulbas bin_value on 0, ning seejärel kasutame taas tööriista Count points in polygon (NB! Selected features only). Nimetame kihi nimega pole. Ühendame kokku ja pole andmed (Join attributes by field value) ning teeme ühendatud kihile uue tulba poleprop, kuhu arvutame pole-punktide osakaalu kõikide punktide arvust. Leiame ühendatud andmekihi keskpunktid (Vector -&gt; Geometry tools -&gt; Centroids). Loome keskpunktide kihist nüüd TPS meetodiga uue rasterkihi, kasutades samu parameetreid, mida eelmisegi rastri puhul. Lõikame rastri kihelkondade kihi järgi, värvime rastri nii, et alad, mis on pole-lembesemad, on tumedamad, ja nimetame lõigatud ja värvitud rastri nimega TPS osakaaludega. 18.2 Veebikaartide eksportimine Eemaldame loodud kihtidelt tunnused, mida me ei taha veebikaardil näidata, valime kaardile aluskaardi (QuickMapServices) ja muudame projekti projektsiooni EPSG:3857ks. Tehtud kaartide hõlpsaks lisamiseks veebi saab installida nüüd qgis2web plugina. See genereerib QGISi projektist kas OpenLayersi, Leafleti või Mapboxi API abil veebikaardi tervikliku veebilehena koos kõikide vajalike kaustade ja failidega, ilma et peaksime tingimata ise JavaScriptis, CSSis ja HTMLis koodi kirjutama. Vali seejärel Web -&gt; qgis2web -&gt; Create web map. Katseta erinevate sätetega, võrdle OpenLayersi ja Leafleti failide suurusi, failistruktuure. Veebikaardi saab (lokaalselt) eksportida, kasutades nuppu Export. 18.3 Veebikaartide majutamine Valmis veebikaardi jagamiseks teistega võid saata kogu rakenduse kausta kellelegi lokaalselt vaatamiseks või selle kuskile serverisse avalikult üles panna. 18.3.1 Ülikooli võrguketas Tartu Ülikooli tudengitel ja töötajatel on TÜ serveris \\\\pohl.ut.ee oma võrguketas (vaikimisi 1GB), kus on võimalik hoida ja varundada oma isiklikke faile. Samuti saab TÜ serverisse oma kodukataloogi salvestada ja üles panna loodud veebilehed (vaata juhendit siit). Veebilehed tuleks salvestada kodukataloogi alamkausta public_html ning nendele saab ligi aadressilt https://www.ut.ee/~kasutajanimi/. Ülikooli võrguketastele ligipääsemiseks peab olema ülikooli sisevõrgus. Väljastpoolt ülikooli saab sisevõrku turvaliselt ühenduse virtuaalse privaatvõrgu (VPN) abil. Ülikooli sisevõrgus olles saab isikliku võrguketta kodu- või sülearvutile külge haakida. NB! Kasutajanimi olgu kujul domenis\\kasutajanimi (mitte kasutajanimi@ut.ee) (Kui see kohe ei tööta, siis proovi esmalt seda.) 18.3.2 GitHub Veebikaarte saab tasuta majutada näiteks ka GitHubis (vaata lühikest juhendit siit). Selleks tuleks teha uus avalik repositoorium, kuhu paigutada qgis2webi väljundkausta sisu (sh kindlasti ka fail index.html). Vaata juhendit näiteks siit. Tee endale GitHubi konto ning seal loo uus repositoorium, nt kas üldisema nimega veebikaart või spetsiifilisema nimega, nt eiole_pole_kaart. Kõige lihtsam on GitHubis toimetada GitHub Desktopi rakenduse abil. Laadi programm alla. Ava programm. Vali File -&gt; Options -&gt; Accounts ning logi sisse GitHub.com kontole oma GitHubi kasutajanime ja parooliga (võib toimuda läbi brauseri). Järgmiseks vali avalehel Clone a repository from the Internet ning filtreeri välja veebis loodud repositoorium (nt MPilvik/veebikaart). Vali see, vali oma arvutis koht, kus tahad seda kausta lokaalselt enda arvutis hoida, ning vajuta Clone. Nüüd tekib sinu arvutis vastavasse kausta uus tühi kaust. Sikuta sellesse tühja kausta kogu qgis2web plugina eksporditud väljund. Mine tagasi GitHub Desktopi rakendusse. Näed, et rakendus näitab sulle kaustas toimunud muudatusi (lisamisi, kustutamisi, muid muudatusi). Selleks, et veebikaardi materjale nüüd GitHubi üles lükata, tuleb need n-ö commitida ning seejärel pushida. All vasakus nurgas on kastike koos nupuga Commit to main. Lisa Summary väljale mingi kirjeldus, mis uuendusi üles laadid (nt veebikaardi materjalid) ning vajuta Commit to main nupule. Lõpuks pead vajutama Publish branch nupule, et kõik veebi üles laadida. Lehel github.com peaksid nüüd sisse logides nägema, et qgis2webi väljundid (sh index.html) on kõik loodud veebikaardi kaustas. Lõpuks tuleb veebileht ka rakendusena nähtavaks teha. Selleks saab kasutada GitHub Pages veebimajutuse teenust. Vali oma repositooriumis Settings -&gt; Pages -&gt; Source = main ja vajuta Save. Oota paar sekundit ning mine lehele https://sinukasutajanimi.github.io/sinurakendusenimi/ Kuskile serverisse riputatud veebilehte saab omakorda paigutada teise veebilehe sisse, nt HTML-i iframe-märgendi abil (kaart ilmub siia pärast praktikumi lõppu). Oma veebikaarte võib jagada ka otse QGISist, nt QGIS Cloudi või Gisquick pluginate abil. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
